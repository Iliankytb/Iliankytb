-- ModuleScript: UILibrary
local library = {}

local UIState = {
    Theme = {
        Background = Color3.fromRGB(30, 30, 30),
        Accent = Color3.fromRGB(0, 170, 255),
        Text = Color3.fromRGB(255, 255, 255),
        Header = Color3.fromRGB(35, 35, 35),
        SectionBackground = Color3.fromRGB(40, 40, 40),
        Button = Color3.fromRGB(50, 50, 50),
        ToggleOn = Color3.fromRGB(0, 200, 0),
        ToggleOff = Color3.fromRGB(100, 100, 100),
        Placeholder = Color3.fromRGB(150, 150, 150),
    }
}

local function createUIElement(className, props)
    local element = Instance.new(className)
    for prop, val in pairs(props) do
        element[prop] = val
    end
    return element
end

function library:CreateWindow(settings)
    settings = settings or {}
    local window = {}

    -- Créer la base de l'UI
    local playerGui = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
    local screenGui = createUIElement("ScreenGui", {
        Name = "UIWindow_" .. (settings.Title or "Window"),
        ResetOnSpawn = false,
        Parent = playerGui
    })

    -- MainFrame
    local mainFrame = createUIElement("Frame", {
        Name = "MainFrame",
        BackgroundColor3 = UIState.Theme.Background,
        BorderSizePixel = 0,
        Size = UDim2.new(0, 800, 0, 500),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        AnchorPoint = Vector2.new(0.5, 0.5),
        Active = true,
        Draggable = true,
        Parent = screenGui
    })
    createUIElement("UICorner", { Parent = mainFrame })

    -- Header
    local header = createUIElement("Frame", {
        BackgroundColor3 = UIState.Theme.Header,
        Size = UDim2.new(1, 0, 0, 50),
        Parent = mainFrame
    })
    createUIElement("TextLabel", {
        Text = settings.Title or "UI Window",
        BackgroundTransparency = 1,
        TextColor3 = UIState.Theme.Text,
        TextSize = 24,
        Font = Enum.Font.GothamSemibold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Position = UDim2.new(0, 15, 0, 0),
        Size = UDim2.new(1, -30, 1, 0),
        Parent = header
    })

    -- Navigation gauche
    local navFrame = createUIElement("Frame", {
        BackgroundColor3 = UIState.Theme.SectionBackground,
        Size = UDim2.new(0, 200, 1, -50),
        Position = UDim2.new(0, 0, 0, 50),
        Parent = mainFrame
    })
    local navLayout = Instance.new("UIListLayout", navFrame)
    navLayout.Padding = UDim.new(0, 6)
    navLayout.SortOrder = Enum.SortOrder.LayoutOrder

    -- Content droite (scroll)
    local contentFrame = createUIElement("ScrollingFrame", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, -200, 1, -50),
        Position = UDim2.new(0, 200, 0, 50),
        CanvasSize = UDim2.new(0, 0, 0, 0),
        ScrollBarThickness = 6,
        Parent = mainFrame
    })
    local contentLayout = Instance.new("UIListLayout", contentFrame)
    contentLayout.Padding = UDim.new(0, 10)
    contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
    contentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        contentFrame.CanvasSize = UDim2.new(0, 0, 0, contentLayout.AbsoluteContentSize.Y + 20)
    end)

    -- Onglets
    window._tabs = {}

    function window:CreateTab(name)
        local tab = {}
        -- Bouton onglet
        tab.button = createUIElement("TextButton", {
            Text = name,
            BackgroundColor3 = UIState.Theme.Button,
            TextColor3 = UIState.Theme.Text,
            Font = Enum.Font.Gotham,
            TextSize = 18,
            Size = UDim2.new(1, -20, 0, 40),
            Parent = navFrame
        })
        createUIElement("UICorner", { Parent = tab.button })

        -- Zone de contenu
        tab.content = createUIElement("Frame", {
            Name = "Content_" .. name,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 0, 0),
            Parent = contentFrame
        })
        local layout = Instance.new("UIListLayout", tab.content)
        layout.Padding = UDim.new(0, 10)
        layout.SortOrder = Enum.SortOrder.LayoutOrder
        layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            tab.content.Size = UDim2.new(1, 0, 0, layout.AbsoluteContentSize.Y)
        end)

        -- Clique onglet
        tab.button.MouseButton1Click:Connect(function()
            for _, t in pairs(window._tabs) do
                t.content.Visible = false
                t.button.BackgroundColor3 = UIState.Theme.Button
            end
            tab.content.Visible = true
            tab.button.BackgroundColor3 = UIState.Theme.Accent
        end)

        -- Par défaut, cache contenu
        tab.content.Visible = false
        table.insert(window._tabs, tab)

        -- Ajout d’éléments
        function tab:AddButton(opts)
            local btn = createUIElement("TextButton", {
                Text = opts.Name or "Button",
                BackgroundColor3 = UIState.Theme.Button,
                TextColor3 = UIState.Theme.Text,
                Font = Enum.Font.Gotham,
                TextSize = 18,
                Size = UDim2.new(1, 0, 0, 40),
                Parent = tab.content
            })
            createUIElement("UICorner", { Parent = btn })
            btn.MouseButton1Click:Connect(function()
                if opts.Callback then opts.Callback() end
            end)
        end

        function tab:AddToggle(opts)
            local btn = createUIElement("TextButton", {
                Text = opts.Name or "Toggle",
                BackgroundColor3 = opts.Default and UIState.Theme.ToggleOn or UIState.Theme.ToggleOff,
                TextColor3 = UIState.Theme.Text,
                Font = Enum.Font.Gotham,
                TextSize = 18,
                Size = UDim2.new(1, 0, 0, 40),
                Parent = tab.content
            })
            createUIElement("UICorner", { Parent = btn })
            local state = opts.Default or false
            btn.MouseButton1Click:Connect(function()
                state = not state
                btn.BackgroundColor3 = state and UIState.Theme.ToggleOn or UIState.Theme.ToggleOff
                if opts.Callback then opts.Callback(state) end
            end)
        end

        function tab:AddSlider(opts)
            local frame = createUIElement("Frame", {
                BackgroundColor3 = UIState.Theme.SectionBackground,
                Size = UDim2.new(1, 0, 0, 60),
                Parent = tab.content
            })
            createUIElement("UICorner", { Parent = frame })
            local label = createUIElement("TextLabel", {
                Text = opts.Name or "Slider",
                BackgroundTransparency = 1,
                TextColor3 = UIState.Theme.Text,
                Font = Enum.Font.Gotham,
                TextSize = 18,
                Position = UDim2.new(0, 10, 0, 5),
                Size = UDim2.new(1, -20, 0, 20),
                Parent = frame
            })
            local btn = createUIElement("TextButton", {
                Text = tostring(opts.Default or opts.Min or 0),
                BackgroundColor3 = UIState.Theme.Button,
                TextColor3 = UIState.Theme.Text,
                Font = Enum.Font.Gotham,
                TextSize = 18,
                Position = UDim2.new(0, 10, 0, 30),
                Size = UDim2.new(1, -20, 0, 30),
                Parent = frame
            })
            createUIElement("UICorner", { Parent = btn })
            local val = opts.Default or opts.Min or 0
            btn.MouseButton1Click:Connect(function()
                val = val + 1
                if val > opts.Max then val = opts.Min end
                btn.Text = tostring(val)
                if opts.Callback then opts.Callback(val) end
            end)
        end

        function tab:AddTextbox(opts)
            local txt = createUIElement("TextBox", {
                Text = opts.Default or "",
                PlaceholderText = opts.Placeholder or "",
                BackgroundColor3 = UIState.Theme.Button,
                TextColor3 = UIState.Theme.Text,
                PlaceholderColor3 = UIState.Theme.Placeholder,
                Font = Enum.Font.Gotham,
                TextSize = 18,
                Size = UDim2.new(1, 0, 0, 40),
                Parent = tab.content
            })
            createUIElement("UICorner", { Parent = txt })
            txt.FocusLost:Connect(function()
                if opts.Callback then opts.Callback(txt.Text) end
            end)
        end

        function tab:AddDropdown(opts)
            local btn = createUIElement("TextButton", {
                Text = opts.Default or opts.Options[1],
                BackgroundColor3 = UIState.Theme.Button,
                TextColor3 = UIState.Theme.Text,
                Font = Enum.Font.Gotham,
                TextSize = 18,
                Size = UDim2.new(1, 0, 0, 40),
                Parent = tab.content
            })
            createUIElement("UICorner", { Parent = btn })
            btn.MouseButton1Click:Connect(function()
                -- cycle through options
                local i = table.find(opts.Options, btn.Text) or 1
                i = i + 1 > #opts.Options and 1 or i + 1
                btn.Text = opts.Options[i]
                if opts.Callback then opts.Callback(btn.Text) end
            end)
        end

        return tab
    end

    function window:SaveConfig()
        if settings.ConfigurationSaving and settings.ConfigurationSaving.Enabled then
            local data = {}
            local path = settings.ConfigurationSaving.FolderName.."/"..settings.ConfigurationSaving.FileName..".json"
            pcall(function()
                writefile(path, game:GetService("HttpService"):JSONEncode(data))
            end)
        end
    end

    return window
end

return library
