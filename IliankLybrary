local library = {}

local UIState = {
    Theme = {
        Background = Color3.fromRGB(30, 30, 30),
        Accent = Color3.fromRGB(0, 170, 255),
        Text = Color3.fromRGB(255, 255, 255),
        Placeholder = Color3.fromRGB(150, 150, 150),
        SectionBackground = Color3.fromRGB(40, 40, 40),
        Button = Color3.fromRGB(50, 50, 50),
        ToggleOn = Color3.fromRGB(0, 200, 0),
        ToggleOff = Color3.fromRGB(100, 100, 100)
    }
}

local function createUIElement(className, props)
    local element = Instance.new(className)
    for prop, val in pairs(props) do
        element[prop] = val
    end
    return element
end

function library:CreateWindow(settings)
    local window = {}
    settings = settings or {}

    local ScreenGui = createUIElement("ScreenGui", {
        Name = "UIWindow_" .. (settings.Name or "Window"),
        ResetOnSpawn = false,
        Parent = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
    })

    local MainFrame = createUIElement("Frame", {
        Name = "MainFrame",
        BackgroundColor3 = UIState.Theme.Background,
        BorderSizePixel = 0,
        Size = UDim2.new(0, 250, 0, 400),
        Position = UDim2.new(0.05, 0, 0.2, 0),
        AnchorPoint = Vector2.new(0, 0),
        Active = true,
        Draggable = true,
        Parent = ScreenGui
    })

    createUIElement("UIListLayout", {
        Parent = MainFrame,
        Padding = UDim.new(0, 4)
    })

    window.MainFrame = MainFrame

    function window:CreateTab(name)
        local tab = {}

        function tab:AddToggle(options)
            local toggle = createUIElement("TextButton", {
                Text = options.Name or "Toggle",
                BackgroundColor3 = UIState.Theme.ToggleOff,
                TextColor3 = UIState.Theme.Text,
                Size = UDim2.new(1, -10, 0, 30),
                Parent = options.Parent or window.MainFrame
            })

            local state = options.Default or false
            toggle.MouseButton1Click:Connect(function()
                state = not state
                toggle.BackgroundColor3 = state and UIState.Theme.ToggleOn or UIState.Theme.ToggleOff
                if options.Callback then
                    options.Callback(state)
                end
            end)
        end

        function tab:AddButton(options)
            local button = createUIElement("TextButton", {
                Text = options.Name or "Button",
                BackgroundColor3 = UIState.Theme.Button,
                TextColor3 = UIState.Theme.Text,
                Size = UDim2.new(1, -10, 0, 30),
                Parent = options.Parent or window.MainFrame
            })

            button.MouseButton1Click:Connect(function()
                if options.Callback then
                    options.Callback()
                end
            end)
        end

        function tab:AddSlider(options)
            local frame = createUIElement("Frame", {
                BackgroundColor3 = UIState.Theme.SectionBackground,
                Size = UDim2.new(1, -10, 0, 50),
                Parent = options.Parent or window.MainFrame
            })

            local label = createUIElement("TextLabel", {
                Text = options.Name or "Slider",
                BackgroundTransparency = 1,
                TextColor3 = UIState.Theme.Text,
                Size = UDim2.new(1, 0, 0.5, 0),
                Parent = frame
            })

            local slider = createUIElement("TextButton", {
                Text = tostring(options.Default or 0),
                BackgroundColor3 = UIState.Theme.Button,
                TextColor3 = UIState.Theme.Text,
                Size = UDim2.new(1, 0, 0.5, 0),
                Position = UDim2.new(0, 0, 0.5, 0),
                Parent = frame
            })

            local value = options.Default or 0
            slider.MouseButton1Click:Connect(function()
                value = value + 1
                if value > options.Max then value = options.Min end
                slider.Text = tostring(value)
                if options.Callback then options.Callback(value) end
            end)
        end

        function tab:AddTextbox(options)
            local textbox = createUIElement("TextBox", {
                Text = options.Default or "",
                PlaceholderText = options.Placeholder or "Enter text...",
                BackgroundColor3 = UIState.Theme.Button,
                TextColor3 = UIState.Theme.Text,
                PlaceholderColor3 = UIState.Theme.Placeholder,
                Size = UDim2.new(1, -10, 0, 30),
                Parent = options.Parent or window.MainFrame
            })

            textbox.FocusLost:Connect(function()
                if options.Callback then options.Callback(textbox.Text) end
            end)
        end

        function tab:AddDropdown(options)
            local dropdown = createUIElement("TextButton", {
                Text = options.Name or "Dropdown",
                BackgroundColor3 = UIState.Theme.Button,
                TextColor3 = UIState.Theme.Text,
                Size = UDim2.new(1, -10, 0, 30),
                Parent = options.Parent or window.MainFrame
            })

            dropdown.MouseButton1Click:Connect(function()
                if options.Callback then options.Callback("Selected") end -- Placeholder comportement
            end)
        end

        function tab:AddExportConfigButton(options)
            tab:AddButton({
                Name = options.Name or "Export Config",
                Callback = function()
                    local config = {}
                    pcall(function()
                        writefile((options.FileName or "config") .. ".json", game:GetService("HttpService"):JSONEncode(config))
                    end)
                end
            })
        end

        return tab
    end

    return window
end

return library
