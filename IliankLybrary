

local HttpService = game:GetService("HttpService")
local UserInputService = game:GetService("UserInputService")



local function createUI(class, props)
	local inst = Instance.new(class)
	for prop, val in pairs(props) do
		inst[prop] = val
	end
	return inst
end

local library = {}

local function copyToClipboard(text)
	if setclipboard then
		setclipboard(text)
	else
		warn("setclipboard is not supported in this environment.")
	end
end

function library:CopyText(Text)
	copyToClipboard(Text)
end

local function VisibleWindow(window,settings1,gui)
	print("Library Version: 0.5")
	local TweenService = game:GetService("TweenService")
	local mainFrame = createUI("Frame", {
		Size = UDim2.new(0, 0, 0, 0);
		Position = UDim2.new(0.5, 0, 0.5, 0);
		BackgroundColor3 = Color3.fromRGB(30, 30, 30);
		AnchorPoint = Vector2.new(0.5, 0.5),
		Interactable = true,
		Parent = gui,
		Draggable = true,
	})
	-- Notify container frame
	local NotifyFrame = createUI("Frame", {
		Size = UDim2.new(0.25, 0, 1, 0),
		Position = UDim2.new(0.75, 0, -0.05, 0),
		BackgroundColor3 = Color3.fromRGB(20, 20, 20),
		BackgroundTransparency = 1,
		AnchorPoint = Vector2.new(0, 0),
		Name = "NotifyFrame",
		Parent = gui,
	})

	-- UIListLayout to stack notifications top to bottom

	function window:Destroy()
		gui:Destroy()
	end
	function window:IsVisbility()
		return mainFrame.Visible	
	end
	-- Ajoute ce layout une seule fois quand tu crées NotifyFrame :
	local listLayout = Instance.new("UIListLayout")
	listLayout.Padding = UDim.new(0, 5)
	listLayout.SortOrder = Enum.SortOrder.LayoutOrder
	listLayout.Parent = NotifyFrame

	function window:Notify(opts)
		local title = opts.Title or "Alert"
		local message = opts.Message or "No message provided."
		local icon = opts.Icon or "rbxassetid://0"
		local duration = opts.Duration or 5

		local tweenService = game:GetService("TweenService")

		-- Panneau principal fixé par UIListLayout
		local notifyPanel = createUI("Frame", {
			Size = UDim2.new(1, 0, 0.15, 0),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			ClipsDescendants = true,
			Parent = NotifyFrame,
		})

		-- Conteneur interne animé (slide in/out)
		local content = createUI("Frame", {
			Size = UDim2.new(1, 0, 1, 0),
			Position = UDim2.new(1, 20, 0, 0), -- hors écran à droite
			BackgroundColor3 = Color3.fromRGB(30, 30, 30),
			BackgroundTransparency = 0.25,
			BorderSizePixel = 0,
			Parent = notifyPanel,
		})

		-- Titre
		createUI("TextLabel", {
			Size = UDim2.new(1, -10, 0.2, 0),
			Position = UDim2.new(0, 5, 0, 2),
			Text = title,
			TextScaled = true,
			TextColor3 = Color3.fromRGB(255, 255, 255),
			Font = Enum.Font.GothamBold,
			BackgroundTransparency = 1,
			TextXAlignment = Enum.TextXAlignment.Left,
			Parent = content,
		})

		-- Message
		createUI("TextLabel", {
			Size = UDim2.new(1, -10, 0.6, 0),
			Position = UDim2.new(0, 5, 0.2, 0),
			Text = message,
			TextScaled = true,
			TextColor3 = Color3.fromRGB(220, 220, 220),
			Font = Enum.Font.Gotham,
			BackgroundTransparency = 1,
			TextWrapped = true,
			TextXAlignment = Enum.TextXAlignment.Left,
			Parent = content,
		})

		-- Icône
		createUI("ImageLabel", {
			Size = UDim2.new(0.15, 0, 0.6, 0),
			Position = UDim2.new(0.85, -5, 0.2, 0),
			Image = icon,
			BackgroundTransparency = 1,
			Parent = content,
		})

		-- Barre de durée
		local durationBar = createUI("Frame", {
			Size = UDim2.new(1, 0, 0.05, 0),
			Position = UDim2.new(0, 0, 0.95, 0),
			BackgroundColor3 = Color3.fromRGB(0, 170, 255),
			BorderSizePixel = 0,
			Parent = content,
		})

		-- Animation de slide in (droite vers gauche)
		local enterTween = tweenService:Create(content, TweenInfo.new(0.4, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
			Position = UDim2.new(0, 0, 0, 0)
		})
		enterTween:Play()

		-- Barre de progression
		durationBar.AnchorPoint = Vector2.new(1, 0)
		durationBar.Position = UDim2.new(1, 0, 0.95, 0)
		local durationTween = tweenService:Create(durationBar, TweenInfo.new(duration, Enum.EasingStyle.Linear), {
			Size = UDim2.new(0, 0, 0.05, 0)
		})
		durationTween:Play()

		-- Despawn après délai
		task.delay(duration, function()
			local exitTween = tweenService:Create(content, TweenInfo.new(0.4, Enum.EasingStyle.Quint, Enum.EasingDirection.In), {
				Position = UDim2.new(1, 20, 0, 0)
			})
			exitTween:Play()
			exitTween.Completed:Wait()
			notifyPanel:Destroy()
		end)
	end



	createUI("UICorner", {Parent = mainFrame})
	local animOpenPC = TweenService:Create(mainFrame, TweenInfo.new(0.4, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
		Size = UDim2.new(0, 600, 0, 400);
		Position = UDim2.new(0.5, 0, 0.5, 0);
	})
	local animClose = TweenService:Create(mainFrame, TweenInfo.new(0.4, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
		Size = UDim2.new(0, 0, 0, 0);
		Position = UDim2.new(0.5, 0, 0.5, 0);
	})
	local animOpenMobile = TweenService:Create(mainFrame, TweenInfo.new(0.4, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
		Size = UDim2.new(0, 400, 0, 200);
		Position = UDim2.new(0.5, 0, 0.5, 0);
	})

	-- Tabs list (gauche)
	local tabsFrame = createUI("ScrollingFrame", {
		Size = UDim2.new(0, 150, 1, 0);
		CanvasSize = UDim2.new(0, 0, 0, 0);
		ScrollBarThickness = 6;
		BackgroundColor3 = Color3.fromRGB(20, 20, 20);
		BorderSizePixel = 0;
		Parent = mainFrame;
	})
	if UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled then
		tabsFrame.Size = UDim2.new(0,75,1,0)
	elseif UserInputService.TouchEnabled and UserInputService.KeyboardEnabled then
		tabsFrame.Size = UDim2.new(0,150,1,0)
	else
		tabsFrame.Size = UDim2.new(0,150,1,0)
	end
	createUI("UIListLayout", {
		Padding = UDim.new(0, 6),
		SortOrder = Enum.SortOrder.LayoutOrder,
		Parent = tabsFrame
	})
	createUI("UIPadding", {
		PaddingTop = UDim.new(0, 8),
		PaddingLeft = UDim.new(0, 6),
		PaddingRight = UDim.new(0, 6),
		Parent = tabsFrame
	})

	-- Contenu des tabs (droite)
	local contentHolder = createUI("Frame", {
		Position = UDim2.new(0, 150, 0, 0);
		Size = UDim2.new(1, -150, 1, 0);
		BackgroundTransparency = 1;
		Interactable = true,
		Parent = mainFrame;
	})
	local titleBar = createUI("Frame", {
		Size = UDim2.new(1, 0, 0, 40),  -- en largeur complète, hauteur 40px
		BackgroundColor3 = Color3.fromRGB(45, 45, 45),
		Interactable = true,
		Parent = mainFrame,
		Position = UDim2.new(0, 0, 0, 0)
	})
	createUI("UICorner", {Parent = titleBar})

	local titleLabel = createUI("TextLabel", {
		Text = settings1.Title,
		TextColor3 = Color3.new(1, 1, 1),
		BackgroundTransparency = 1,
		Font = Enum.Font.GothamBold,
		TextSize = 20,
		Size = UDim2.new(1, -20, 1, 0),
		Position = UDim2.new(0, 10, 0, 0),
		TextXAlignment = Enum.TextXAlignment.Left,
		Parent = titleBar
	})
	local CloseButton = createUI("TextButton", {
		Text = "X",
		TextColor3 = Color3.new(1, 0, 0),
		BackgroundTransparency = 1,
		Font = Enum.Font.GothamBold,
		TextSize = 25,
		Size = UDim2.new(0.25, 0, 1, 0),
		Position = UDim2.new(0.7, 0, 0, 0),
		TextXAlignment = Enum.TextXAlignment.Right,
		Parent = titleBar
	})
	local OpenButton = createUI("TextButton", {
		Text = "Open",
		TextColor3 = Color3.new(1, 1, 1),
		BackgroundTransparency = 0.1,
		Font = Enum.Font.GothamBold,
		TextSize = 25,
		BackgroundColor3 = Color3.fromRGB(30, 30, 30);
		Size = UDim2.new(0.15, 0, 0.1, 0),
		Position = UDim2.new(0.15, 0, 0.125, 0),
		TextXAlignment = Enum.TextXAlignment.Center,
		Visible = false,
		Draggable = true,
		Parent = gui
	})
	CloseButton.MouseButton1Click:Connect(function()
		animClose:Play()
		OpenButton.Visible = true
		animClose.Completed:Connect(function()
			mainFrame.Visible = false
		end)
	end)
	OpenButton.MouseButton1Click:Connect(function()
		mainFrame.Visible = true
		if UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled then
			animOpenMobile:Play()
		elseif UserInputService.TouchEnabled and UserInputService.KeyboardEnabled then
			animOpenPC:Play()
		else
			animOpenPC:Play()
		end
		OpenButton.Visible = false

	end)
	if UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled then
		animOpenMobile:Play()
	elseif UserInputService.TouchEnabled and UserInputService.KeyboardEnabled then
		animOpenPC:Play()
	else
		animOpenPC:Play()
	end
	-- Ajuste la position et la taille des autres frames pour laisser la place au titre
	tabsFrame.Position = UDim2.new(0, 0, 0, 40)
	tabsFrame.Size = UDim2.new(0, 150, 1, -40)

	contentHolder.Position = UDim2.new(0, 150, 0, 40)
	contentHolder.Size = UDim2.new(1, -150, 1, -40)
	function window:SetVisibility(bool)
		if bool then
			mainFrame.Visible = true
			OpenButton.Visible = false
		else
			mainFrame.Visible = false
			OpenButton.Visible = true
		end
	end


	function window:CreateTab(name)
		local HttpService = game:GetService("HttpService")

		-- Vérifie si writefile/readfile sont disponibles (ex: en exploit Roblox)
		if not writefile or not readfile then
			warn("writefile/readfile non disponibles.")
			return
		end

		local flags = {}

		-- Structure UI
		local tab = {
			sliders = {},
			textboxes = {},
			dropdowns = {},
			toggles = {},
			ColorPicker = {},
			SlidersValue = {},
			ColorPickerValue = {},
			textboxesText = {},
			TogglesValue = {},
			dropdownValue = {},
		}

		-- Settings
		local settingsData = settings1 and settings1.Data or {}
		local FolderName = settingsData.FolderName or "UnknownFolder"
		local fileName = settingsData.FileName or "UnknownFile"

		-- Chemin complet avec dossier (ajoute l'extension .json)
		local fullPath = FolderName .. "/" .. fileName .. ".json"

		-- Fonction pour sauvegarder les flags dans un fichier JSON
		local function SaveData()
			local success, err = pcall(function()
				-- Encode flags en JSON, gérer Color3 en format table RGB pour éviter erreur JSON
				local serializableFlags = {}

				for key, value in pairs(flags) do
					if typeof(value) == "Color3" then
						serializableFlags[key] = {
							__type = "Color3",
							R = value.R,
							G = value.G,
							B = value.B
						}
					else
						serializableFlags[key] = value
					end
				end

				local jsonData = HttpService:JSONEncode(serializableFlags)
				writefile(fullPath, jsonData)
				print("Données sauvegardées dans", fullPath)
			end)
			if not success then
				warn("Erreur de sauvegarde :", err)
			end
		end

		-- Fonction pour transformer un tableau JSON en Color3 si besoin
		local function DeserializeValue(val)
			if type(val) == "table" and val.__type == "Color3" and val.R and val.G and val.B then
				return Color3.new(val.R, val.G, val.B)
			end
			return val
		end

		-- Fonction pour définir une valeur de flag et sauvegarder
		local function SetFlag(name, value)
			print("SetFlag", name, value)
			flags[name] = value
			SaveData()
		end

		-- Chargement des données si activé
		if settingsData.EnableSavingData then

			function library:LoadData()
				print("Chargement des données...")

				local success, content = pcall(readfile, fullPath)
				if not success or not content or content == "" then
					warn("Échec du chargement : fichier introuvable, vide ou non lisible.")
					return
				end

				local loadedData
				success, loadedData = pcall(function()
					return HttpService:JSONDecode(content)
				end)

				if not success or type(loadedData) ~= "table" then
					warn("Échec du décodage JSON ou données invalides.")
					return
				end

				-- Désérialise les valeurs Color3
				for k, v in pairs(loadedData) do
					loadedData[k] = DeserializeValue(v)
				end

				flags = loadedData

				tab.SlidersValue = tab.SlidersValue or {}
				tab.textboxesText = tab.textboxesText or {}
				tab.dropdownValue = tab.dropdownValue or {}
				tab.TogglesValue = tab.TogglesValue or {}
				tab.ColorPickerValue = tab.ColorPickerValue or {}

				for name, value in pairs(flags) do
					print(name,value)
					if tab.sliders and tab.sliders[name] then
						pcall(function()
							print("Set slider", name, "to", value)
							tab.sliders[name]:SetValue(value)
							tab.SlidersValue[name] = value
						end)
					end
					if tab.ColorPicker and tab.ColorPicker[name] then
						pcall(function()
							print("Set color picker", name, "to", value)
							tab.ColorPicker[name]:Set(value)
							tab.ColorPickerValue[name] = value
						end)
					end
					if tab.textboxes and tab.textboxes[name] then
						pcall(function()
							print("Set textbox", name, "to", value)
							tab.textboxes[name]:SetText(value)
							tab.textboxesText[name] = value
						end)
					end
					if tab.dropdowns and tab.dropdowns[name] then
						pcall(function()
							print("Set dropdown", name, "to", value)
							tab.dropdowns[name]:Select(value)
							tab.dropdownValue[name] = value
						end)
					end
					if tab.toggles and tab.toggles[name] then
						pcall(function()
							print("Set toggles", name, "to", value)
							tab.toggles[name]:Set(value)
							tab.TogglesValue[name] = value
						end)
					end
				end

				window:Notify({
					Title = "Data!",
					Message = "Loaded Data!",
					Duration = 5,
				})
			end

		end

		-- Expose SetFlag pour usage extérieur si besoin
		library.SetFlag = SetFlag



		-- Frame de contenu scrollable
		local scroll = createUI("ScrollingFrame", {
			Size = UDim2.new(1, 0, 1, 0);
			CanvasSize = UDim2.new(0, 0, 0, 0);
			ScrollBarThickness = 8;
			Visible = false;
			BackgroundTransparency = 1;
			Parent = contentHolder;
		})
		local layout = createUI("UIListLayout", {
			Padding = UDim.new(0, 10),
			SortOrder = Enum.SortOrder.LayoutOrder,
			Parent = scroll
		})

		layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
			scroll.CanvasSize = UDim2.new(0, 0, 0, layout.AbsoluteContentSize.Y + 20)
		end)

		createUI("UIPadding", {
			PaddingTop = UDim.new(0, 10),
			PaddingLeft = UDim.new(0, 10),
			PaddingRight = UDim.new(0, 10),
			Parent = scroll;
		})

		tab.content = scroll

		-- Bouton de tab
		local tabButton = createUI("TextButton", {
			Text = name;
			Size = UDim2.new(1, 0, 0, 30);
			BackgroundColor3 = Color3.fromRGB(50, 50, 50);
			TextColor3 = Color3.new(1, 1, 1);
			Font = Enum.Font.GothamBold;
			TextSize = 14;
			Parent = tabsFrame;
		})
		createUI("UICorner", {Parent = tabButton})

		tabButton.MouseButton1Click:Connect(function()
			for _, t in pairs(window.tabs) do
				t.content.Visible = false
			end
			tab.content.Visible = true
		end)

		-- Ajout dans la liste de tabs
		table.insert(window.tabs, tab)

		-- Affiche automatiquement le premier
		if #window.tabs == 1 then
			tab.content.Visible = true
		end

		function tab:AddButton(opts)
			local button = createUI("TextButton", {
				Text = opts.Text;
				Size = UDim2.new(1, 0, 0, 30);
				BackgroundColor3 = Color3.fromRGB(50, 50, 50);
				TextColor3 = Color3.new(1, 1, 1);
				Font = Enum.Font.Gotham;
				TextSize = 12;
				Parent = tab.content;
			})
			createUI("UICorner", {Parent = button})
			createUI("UIPadding", {
				PaddingLeft = UDim.new(0, 10),
				PaddingRight = UDim.new(0, 10),
				PaddingTop = UDim.new(0, 5),
				PaddingBottom = UDim.new(0, 5),
				Parent = button;
			})
			button.MouseButton1Click:Connect(function()
				if opts.Callback then opts.Callback() end

			end)


		end
		function tab:AddText(opts)
			local button = createUI("TextLabel", {
				Text = opts.Text;
				Size = UDim2.new(1, 0, 0, 30);
				BackgroundColor3 = Color3.fromRGB(50, 50, 50);
				TextColor3 = Color3.new(1, 1, 1);
				Font = Enum.Font.Gotham;
				TextSize = 12;
				Parent = tab.content;
			})
			createUI("UICorner", {Parent = button})
			createUI("UIPadding", {
				PaddingLeft = UDim.new(0, 10),
				PaddingRight = UDim.new(0, 10),
				PaddingTop = UDim.new(0, 5),
				PaddingBottom = UDim.new(0, 5),
				Parent = button;
			})


			-- Retourne un objet avec une méthode Set pour changer le texte
			local obj = {}
			function obj:Set(t)
				-- t est une table avec un seul élément string, ex: {"nouveaux"}
				if type(t) == "table" and type(t[1]) == "string" then
					button.Text = t[1]
				else
					warn("Set attend une table avec un string en premier élément")
				end
			end

			return obj
		end

		function tab:AddParagraph(opts)
			-- opts attend une table avec Title (string) et Content (string)
			assert(type(opts) == "table", "Expected table as argument")
			assert(type(opts.Title) == "string", "Title must be a string")
			assert(type(opts.Content) == "string", "Content must be a string")

			-- Création de la frame conteneur
			local frame = createUI("Frame", {
				Size = UDim2.new(1, 0, 0, 50), -- hauteur temporaire, on va ajuster après
				BackgroundColor3 = Color3.fromRGB(50, 50, 50),
				Parent = tab.content,
			})
			createUI("UICorner", {Parent = frame})

			-- Padding interne pour un peu d’espace autour
			local padding = createUI("UIPadding", {
				PaddingLeft = UDim.new(0, 10),
				PaddingRight = UDim.new(0, 10),
				PaddingTop = UDim.new(0, 10),
				PaddingBottom = UDim.new(0, 10),
				Parent = frame,
			})

			-- Label du titre
			local titleLabel = createUI("TextLabel", {
				Text = opts.Title,
				Size = UDim2.new(1, 0, 0, 25),
				Position = UDim2.new(0, 5, 0, 5), -- position locale ajoutée
				BackgroundTransparency = 1,
				TextColor3 = Color3.new(1, 1, 1),
				Font = Enum.Font.GothamBold,
				TextSize = 18,
				TextXAlignment = Enum.TextXAlignment.Left,
				Parent = frame,
			})

			-- Label du contenu (multi-line)
			local contentLabel = createUI("TextLabel", {
				Text = opts.Content,
				Size = UDim2.new(1, 0, 0, 0), -- taille temporaire
				Position = UDim2.new(0, 5, 0, 35), -- position locale ajoutée (juste en dessous du titre)
				BackgroundTransparency = 1,
				TextColor3 = Color3.new(1, 1, 1),
				Font = Enum.Font.Gotham,
				TextSize = 14,
				TextWrapped = true,
				TextXAlignment = Enum.TextXAlignment.Left,
				Parent = frame,
			})


			-- Calcul de la hauteur nécessaire pour le contenu (avec un petit délai pour s'assurer du rendu)
			-- On peut utiliser TextBounds pour calculer la taille
			local textSize = contentLabel.TextBounds
			contentLabel.Size = UDim2.new(1, 0, 0, textSize.Y)

			-- Ajustement de la taille de la frame conteneur (titre + contenu + padding)
			frame.Size = UDim2.new(1, 0, 0, 25 + textSize.Y + 20) -- 25 pour le titre, 20 pour padding haut+bas

			-- Retourner la frame et labels pour pouvoir manipuler ensuite si besoin
			return {
				Frame = frame,
				TitleLabel = titleLabel,
				ContentLabel = contentLabel,
				Set = function(self, newOpts)
					if newOpts.Title then
						self.TitleLabel.Text = newOpts.Title
					end
					if newOpts.Content then
						self.ContentLabel.Text = newOpts.Content
						local newSize = self.ContentLabel.TextBounds
						self.ContentLabel.Size = UDim2.new(1, 0, 0, newSize.Y)
						self.Frame.Size = UDim2.new(1, 0, 0, 25 + newSize.Y + 20)
					end
				end
			}
		end


		local TweenService = game:GetService("TweenService")
		local UserInputService = game:GetService("UserInputService")

		-- Convertit Color3 en table pour sauvegarde
		local function Color3ToTable(color)
			return {color.R, color.G, color.B}
		end

		-- Convertit table en Color3 pour chargement
		local function TableToColor3(t)
			if type(t) == "table" and #t == 3 then
				return Color3.new(t[1], t[2], t[3])
			else
				return Color3.fromRGB(255, 255, 255) -- couleur par défaut
			end
		end

		function tab:AddColorPicker(opts)
			local flag = opts.Flag or opts.Name or "ColorPicker"
			local defaultColor = opts.Color or Color3.fromRGB(255, 255, 255)

			tab.ColorPicker = tab.ColorPicker or {}
			tab.ColorPickerValue = tab.ColorPickerValue or {}

			-- UI Elements
			local container = createUI("TextButton", {
				Text = opts.Text;
				Size = UDim2.new(1, 0, 0, 30);
				BackgroundColor3 = Color3.fromRGB(50, 50, 50);
				TextColor3 = Color3.new(1, 1, 1);
				Font = Enum.Font.Gotham;
				TextSize = 12;
				Parent = tab.content;
			})
			createUI("UICorner", {Parent = container})
			createUI("UIPadding", {
				PaddingLeft = UDim.new(0, 10),
				PaddingRight = UDim.new(0, 10),
				PaddingTop = UDim.new(0, 5),
				PaddingBottom = UDim.new(0, 5),
				Parent = container;
			})

			local colorDisplay = Instance.new("TextButton")
			colorDisplay.Size = UDim2.new(0, 50, 0, 25)
			colorDisplay.Position = UDim2.new(1, -60, 0.5, -12)
			colorDisplay.BackgroundColor3 = defaultColor
			colorDisplay.BorderSizePixel = 0
			colorDisplay.Text = ""
			colorDisplay.AutoButtonColor = false
			colorDisplay.Parent = container
			createUI("UICorner", {Parent = colorDisplay})

			-- Color Picker Window
			local colorWindow = Instance.new("Frame")
			colorWindow.Size = UDim2.new(0, 250, 0, 250)
			colorWindow.Position = UDim2.new(0.5, 0, 0.5, 0)
			colorWindow.AnchorPoint = Vector2.new(0.5, 0.5)
			colorWindow.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
			colorWindow.Visible = false
			colorWindow.BorderSizePixel = 0
			colorWindow.ZIndex = 10
			colorWindow.Parent = gui

			createUI("UICorner", {CornerRadius = UDim.new(0, 6), Parent = colorWindow})

			local colorWheel = Instance.new("ImageLabel")
			colorWheel.Size = UDim2.new(0, 200, 0, 200)
			colorWheel.Position = UDim2.new(0.5, 0, 0, 10)
			colorWheel.AnchorPoint = Vector2.new(0.5, 0)
			colorWheel.BackgroundTransparency = 1
			colorWheel.Image = "rbxassetid://6020299385" -- roue des couleurs
			colorWheel.ZIndex = 11
			colorWheel.Parent = colorWindow

			local closeBtn = Instance.new("TextButton")
			closeBtn.Size = UDim2.new(0, 60, 0, 30)
			closeBtn.Position = UDim2.new(0.5, -30, 1, -35)
			closeBtn.Text = "Close"
			closeBtn.ZIndex = 11
			closeBtn.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
			closeBtn.TextColor3 = Color3.new(1, 1, 1)
			closeBtn.Parent = colorWindow
			Instance.new("UICorner", closeBtn)

			local selecting = false

			local function ApplyColor(color)
				TweenService:Create(colorDisplay, TweenInfo.new(0.15), {
					BackgroundColor3 = color
				}):Play()

				if settings1 and settings1.Data and settings1.Data.EnableSavingData then
					print("Saving color: ", color)
					local colorTable = Color3ToTable(color)
					tab.ColorPickerValue[flag] = colorTable
					SetFlag(flag, colorTable) -- sauvegarde la table, pas Color3 direct
				end
				if opts.Callback then
					opts.Callback(color)
				end
			end

			local function updateColor(input)
				local relPos = Vector2.new(input.Position.X - colorWheel.AbsolutePosition.X, input.Position.Y - colorWheel.AbsolutePosition.Y)
				local radius = colorWheel.AbsoluteSize.X / 2
				local center = Vector2.new(radius, radius)
				local dist = (relPos - center).Magnitude

				if dist <= radius then
					local angle = math.atan2(relPos.Y - center.Y, relPos.X - center.X)
					local hue = (angle / (2 * math.pi)) % 1
					local color = Color3.fromHSV(hue, 1, 1)
					ApplyColor(color)
				end
			end

			colorWheel.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
					selecting = true
					updateColor(input)
				end
			end)

			colorWheel.InputChanged:Connect(function(input)
				if selecting and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
					updateColor(input)
				end
			end)

			UserInputService.InputEnded:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
					selecting = false
				end
			end)

			colorDisplay.MouseButton1Click:Connect(function()
				colorWindow.Visible = not colorWindow.Visible
			end)

			closeBtn.MouseButton1Click:Connect(function()
				colorWindow.Visible = false
			end)

			-- Enregistrement dans tab.ColorPicker avec méthode Set et Get
			local api = {
				Set = function(_, color)
					if typeof(color) == "table" then
						local c = TableToColor3(color)
						ApplyColor(c)
					elseif typeof(color) == "Color3" then
						ApplyColor(color)
					end
				end,
				Get = function()
					local saved = tab.ColorPickerValue[flag]
					if saved then
						return TableToColor3(saved)
					else
						return defaultColor
					end
				end
			}
			tab.ColorPicker[flag] = api

		

			return api
		end


		function tab:AddToggle(opts)
			local flag = opts.Flag or opts.Name or "Button"
			local value = opts.Default or false

			local button = createUI("TextButton", {
				Text = opts.Text;
				Size = UDim2.new(1, 0, 0, 30);
				BackgroundColor3 = Color3.fromRGB(50, 50, 50);
				TextColor3 = Color3.new(1, 1, 1);
				Font = Enum.Font.Gotham;
				TextSize = 12;
				TextXAlignment = Enum.TextXAlignment.Left;
				Parent = tab.content;
			})

			createUI("UICorner", {Parent = button})
			createUI("UIPadding", {
				PaddingLeft = UDim.new(0, 10),
				PaddingRight = UDim.new(0, 10),
				PaddingTop = UDim.new(0, 5),
				PaddingBottom = UDim.new(0, 5),
				Parent = button;
			})

			local toggleContainer = createUI("Frame", {
				AnchorPoint = Vector2.new(1, 0.5),
				Position = UDim2.new(1, -10, 0.5, 0),
				Size = UDim2.new(0, 40, 0, 20),
				BackgroundColor3 = Color3.fromRGB(80, 80, 80),
				Parent = button,
			})
			createUI("UICorner", {CornerRadius = UDim.new(1, 0), Parent = toggleContainer})

			local toggleCircle = createUI("Frame", {
				Size = UDim2.new(0, 16, 0, 16),
				Position = value and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8),
				BackgroundColor3 = value and Color3.fromRGB(0, 170, 0) or Color3.fromRGB(200, 200, 200),
				Parent = toggleContainer,
			})
			createUI("UICorner", {CornerRadius = UDim.new(1, 0), Parent = toggleCircle})

			local function setToggleState(state)
				value = state
				local goalPos = state and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)
				local goalColor = state and Color3.fromRGB(0, 170, 0) or Color3.fromRGB(200, 200, 200)

				TweenService:Create(toggleCircle, TweenInfo.new(0.2), {
					Position = goalPos,
					BackgroundColor3 = goalColor
				}):Play()
			end

			button.MouseButton1Click:Connect(function(State)
				if State then
					value = State
				else
					value = not value
				end
				if settings1 and settings1.Data and settings1.Data.EnableSavingData then
					print("Saving Toggle "..flag.." to "..tostring(value))
					tab.TogglesValue = tab.TogglesValue or {}
					tab.TogglesValue[flag] = value
					SetFlag(flag, value)
				end
				setToggleState(value)
				if opts.Callback then opts.Callback(value) end
				
			end)

			-- Init state
			setToggleState(value)

			-- Renvoi de l'objet
			local obj = {}

			function obj:Set(newValue)
				if type(newValue) ~= "boolean" then
					warn("Set attend un booléen.")
					return
				end
				print("load Toggle " ..tostring(newValue))
				
				setToggleState(newValue)

				if settings1 and settings1.Data and settings1.Data.EnableSavingData then
					tab.TogglesValue = tab.TogglesValue or {}
					tab.TogglesValue[flag] = newValue
					SetFlag(flag, newValue)
				end

				if opts.Callback then
					opts.Callback(newValue)
				end
			end
			tab.toggles[flag] = obj
		
			return obj
		end

		local UserInputService = game:GetService("UserInputService")

		function tab:AddSlider(opts)
			local flag = opts.Flag or opts.Name or "Slider"
			local min = opts.Min or 0
			local max = opts.Max or 100
			local default = opts.Default or min

			tab.sliders = tab.sliders or {}
			tab.SlidersValue = tab.SlidersValue or {}

			local value = default

			local slider = createUI("TextButton", {
				Text = opts.Text or "Slider",
				Size = UDim2.new(1, 0, 0, 30),
				BackgroundColor3 = Color3.fromRGB(50, 50, 50),
				TextColor3 = Color3.new(1, 1, 1),
				Font = Enum.Font.Gotham,
				TextSize = 12,
				TextXAlignment = Enum.TextXAlignment.Left,
				Parent = tab.content,
			})
			createUI("UICorner", { Parent = slider })
			createUI("UIPadding", {
				PaddingLeft = UDim.new(0, 10),
				PaddingRight = UDim.new(0, 10),
				PaddingTop = UDim.new(0, 5),
				PaddingBottom = UDim.new(0, 5),
				Parent = slider,
			})

			local sliderBar = createUI("Frame", {
				AnchorPoint = Vector2.new(1, 0.5),
				Position = UDim2.new(1, -10, 0.5, 0),
				Size = UDim2.new(0, 100, 0, 6),
				BackgroundColor3 = Color3.fromRGB(80, 80, 80),
				Parent = slider,
			})
			createUI("UICorner", { CornerRadius = UDim.new(1, 0), Parent = sliderBar })

			local fillBar = createUI("Frame", {
				Size = UDim2.new((value - min) / (max - min), 0, 1, 0),
				BackgroundColor3 = Color3.fromRGB(0, 170, 255),
				Parent = sliderBar,
			})
			createUI("UICorner", { CornerRadius = UDim.new(1, 0), Parent = fillBar })

			local label = createUI("TextLabel", {
				AnchorPoint = Vector2.new(0.5, 0.5),
				Position = UDim2.new(0.5, 0, 0.5, -15),
				Size = UDim2.new(0, 60, 0, 14),
				BackgroundTransparency = 1,
				Text = tostring(value),
				TextColor3 = Color3.new(1, 1, 1),
				Font = Enum.Font.Gotham,
				TextSize = 10,
				Parent = sliderBar,
			})

			local obj = {}
			obj.value = value

			function obj:SetValue(v)
				v = math.clamp(v, min, max)
				local percent = (v - min) / (max - min)
				fillBar.Size = UDim2.new(percent, 0, 1, 0)
				label.Text = tostring(v)
				value = v
				obj.value = v

				if settings1 and settings1.Data and settings1.Data.EnableSavingData then
					tab.SlidersValue = tab.SlidersValue or {}
					tab.SlidersValue[flag] = value
					SetFlag(flag, value)
				end
				if opts.Callback then
					opts.Callback(v)
				end
			end

			local moveConn, releaseConn

			local function updateSlider(x)
				local percent = math.clamp((x - sliderBar.AbsolutePosition.X) / sliderBar.AbsoluteSize.X, 0, 1)
				local v = math.floor(min + (max - min) * percent)
				obj:SetValue(v)
				if settings1 and settings1.Data and settings1.Data.EnableSavingData then
					tab.SlidersValue = tab.SlidersValue or {}
					tab.SlidersValue[flag] = v
					SetFlag(flag, v)
				end
			end

			sliderBar.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
					updateSlider(input.Position.X)

					moveConn = UserInputService.InputChanged:Connect(function(moveInput)
						if moveInput.UserInputType == Enum.UserInputType.MouseMovement or moveInput.UserInputType == Enum.UserInputType.Touch then
							updateSlider(moveInput.Position.X)
						end
					end)

					releaseConn = UserInputService.InputEnded:Connect(function(endInput)
						if endInput.UserInputType == Enum.UserInputType.MouseButton1 or endInput.UserInputType == Enum.UserInputType.Touch then
							if moveConn then moveConn:Disconnect() end
							if releaseConn then releaseConn:Disconnect() end
						end
					end)
				end
			end)

			tab.sliders[flag] = obj

			return obj
		end




		function tab:AddTextbox(opts)
			local flag = opts.Flag or opts.Name or "Textbox"
			local defaultText = opts.Default or ""

			tab.textboxes = tab.textboxes or {}
			tab.textboxesText = tab.textboxesText or {}

			local txt = createUI("TextBox", {
				Text = defaultText,
				PlaceholderText = opts.Placeholder or "",
				BackgroundColor3 = Color3.fromRGB(80, 80, 80),
				TextColor3 = Color3.new(1, 1, 1),
				PlaceholderColor3 = Color3.fromRGB(143, 143, 143),
				Font = Enum.Font.Gotham,
				TextSize = 18,
				Size = UDim2.new(1, 0, 0, 40),
				Parent = tab.content
			})
			createUI("UICorner", { Parent = txt })

			local obj = {}

			local function UpdateValue(newValue)
				if settings1 and settings1.Data and settings1.Data.EnableSavingData then
					tab.textboxesText = tab.textboxesText or {}
					tab.textboxesText[flag] = newValue
					SetFlag(flag, newValue)
				end
				if opts.Callback then opts.Callback(newValue) end
			end

			txt.FocusLost:Connect(function()
				UpdateValue(txt.Text)
			end)

			function obj:Set(t)
				if type(t) == "table" then
					if type(t.Placeholder) == "string" then
						txt.PlaceholderText = t.Placeholder
					end
					if type(t.Text) == "string" then
						txt.Text = t.Text
						UpdateValue(t.Text)
					end
				else
					warn("Set attend une table avec 'Placeholder' et/ou 'Text'")
				end
			end

			function obj:SetText(newText)
				if type(newText) == "string" then
					txt.Text = newText
					UpdateValue(newText)
				else
					warn("SetText attend une string")
				end
			end

			tab.textboxes[flag] = obj

			return obj
		end

		function tab:AddDropdown(opts)
			local flag = opts.Flag or opts.Name or "Dropdown"
			local multi = opts.MultiSelect or false
			local dropdown = {}
			dropdown.Selected = {}
			dropdown.Options = opts.Options or {}
			dropdown.FrameOpen = false

			tab.dropdowns = tab.dropdowns or {}
			tab.dropdownValue = tab.dropdownValue or {}

			local btn = createUI("TextButton", {
				Text = opts.Name or "Dropdown",
				BackgroundColor3 = Color3.fromRGB(80, 80, 80),
				TextColor3 = Color3.new(1, 1, 1),
				Font = Enum.Font.Gotham,
				TextSize = 14,
				Size = UDim2.new(1, 0, 0, 40),
				Parent = tab.content
			})
			createUI("UICorner", { Parent = btn })

			local container = createUI("Frame", {
				Size = UDim2.new(1, 0, 0, 0),
				BackgroundTransparency = 1,
				ClipsDescendants = true,
				Parent = tab.content
			})

			local optionHolder = createUI("Frame", {
				Size = UDim2.new(1, 0, 0, 0),
				BackgroundColor3 = Color3.fromRGB(60, 60, 60),
				Parent = container
			})
			createUI("UICorner", { Parent = optionHolder })

			local layout = createUI("UIListLayout", {
				Padding = UDim.new(0, 4),
				SortOrder = Enum.SortOrder.LayoutOrder,
				Parent = optionHolder
			})

			local function updateCanvas()
				local newHeight = layout.AbsoluteContentSize.Y + 10
				TweenService:Create(container, TweenInfo.new(0.2), {
					Size = dropdown.FrameOpen and UDim2.new(1, 0, 0, newHeight) or UDim2.new(1, 0, 0, 0)
				}):Play()
			end

			local function updateButtonText()
				if #dropdown.Selected == 0 then
					btn.Text = opts.Name or "Dropdown"
				else
					btn.Text = table.concat(dropdown.Selected, ", ")
				end
			end

			local function createOptions(optionList)
				for _, child in ipairs(optionHolder:GetChildren()) do
					if child:IsA("TextButton") then
						child:Destroy()
					end
				end

				for _, option in ipairs(optionList) do
					local optBtn = createUI("TextButton", {
						Text = option,
						TextColor3 = Color3.new(1,1,1),
						Font = Enum.Font.Gotham,
						TextSize = 14,
						BackgroundColor3 = Color3.fromRGB(90, 90, 90),
						Size = UDim2.new(1, 0, 0, 28),
						Parent = optionHolder
					})
					createUI("UICorner", { Parent = optBtn })

					optBtn.MouseButton1Click:Connect(function()
						if multi then
							if table.find(dropdown.Selected, option) then
								table.remove(dropdown.Selected, table.find(dropdown.Selected, option))
							else
								table.insert(dropdown.Selected, option)
							end
						else
							dropdown.Selected = {option}
							dropdown.FrameOpen = false
							updateCanvas()
						end
						if settings1 and settings1.Data and settings1.Data.EnableSavingData then
							tab.dropdownValue = tab.dropdownValue or {}
							tab.dropdownValue[flag] = dropdown.Selected
							SetFlag(flag, dropdown.Selected)
						end
						updateButtonText()
						if opts.Callback then opts.Callback(option, dropdown.Selected) end
					end)
				end
			end

			createOptions(dropdown.Options)

			btn.MouseButton1Click:Connect(function()
				dropdown.FrameOpen = not dropdown.FrameOpen
				updateCanvas()
			end)

			updateCanvas()
			updateButtonText()

			function dropdown:Refresh(newOptions)
				dropdown.Options = newOptions
				dropdown.Selected = {}
				updateButtonText()
				createOptions(newOptions)
			end

			function dropdown:Select(value)
				if typeof(value) == "table" then
					if multi then
						for _, val in ipairs(value) do
							if not table.find(dropdown.Options, val) then
								warn("Option '" .. tostring(val) .. "' non trouvée dans le dropdown.")
								continue
							end
							if not table.find(dropdown.Selected, val) then
								table.insert(dropdown.Selected, val)
							end
						end
					else
						-- mono-sélection : prendre le premier élément
						local val = value[1]
						if not table.find(dropdown.Options, val) then
							warn("Option '" .. tostring(val) .. "' non trouvée dans le dropdown.")
							return
						end
						dropdown.Selected = {val}
						dropdown.FrameOpen = false
						updateCanvas()
					end
				else
					-- Si value est une valeur simple
					if not table.find(dropdown.Options, value) then
						warn("Option '" .. tostring(value) .. "' non trouvée dans le dropdown.")
						return
					end

					if multi then
						if not table.find(dropdown.Selected, value) then
							table.insert(dropdown.Selected, value)
						end
					else
						dropdown.Selected = {value}
						dropdown.FrameOpen = false
						updateCanvas()
					end
				end

				-- Sauvegarde
				if settings1 and settings1.Data and settings1.Data.EnableSavingData then
					tab.dropdownValue = tab.dropdownValue or {}
					tab.dropdownValue[flag] = dropdown.Selected
					SetFlag(flag, dropdown.Selected)
				end

				updateButtonText()

				if opts.Callback then
					opts.Callback(value, dropdown.Selected)
				end
			end

			tab.dropdowns[flag] = dropdown -- ✅ Sauvegarde du dropdown pour LoadData
			return dropdown -- ✅ Très important !
		end



		return tab
	end
end
function library:CreateWindow(settings1, onLoad)
	if game:GetService("CoreGui"):FindFirstChild("UILibrary") then
		game:GetService("CoreGui"):FindFirstChild("UILibrary"):Destroy()
	end
	local window = {}
	window.tabs = {}


	local gui = createUI("ScreenGui", {
		Name = "UILibrary";
		ResetOnSpawn = false;
		Parent = game:GetService("CoreGui");
	})
	if settings1.KeySystem then
		local TweenService = game:GetService("TweenService")

		-- Récupération des valeurs
		local Title = settings1.KeySettings.Title
		local Note = settings1.KeySettings.Note
		local Key = settings1.KeySettings.Key

		-- Création du cadre principal (départ à taille 0 pour anim)
		local KeyFrame = createUI("Frame", {
			Size = UDim2.new(0, 0, 0, 0),
			Position = UDim2.new(0.5, 0, 0.5, 0),
			AnchorPoint = Vector2.new(0.5, 0.5),
			BackgroundColor3 = Color3.fromRGB(30, 30, 30),
			Parent = gui,
		})
		createUI("UICorner", {Parent = KeyFrame})

		-- Animation d'ouverture
		TweenService:Create(KeyFrame, TweenInfo.new(0.4, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
			Size = UDim2.new(0, 500, 0, 200),
			Position = UDim2.new(0.5, 0, 0.5, 0),
		}):Play()

		-- Titre
		createUI("TextLabel", {
			Size = UDim2.new(1, -20, 0, 30),
			Position = UDim2.new(0, 10, 0, 10),
			BackgroundTransparency = 1,
			Text = Title,
			TextColor3 = Color3.new(1, 1, 1),
			TextScaled = true,
			Font = Enum.Font.GothamBold,
			Parent = KeyFrame,
		})

		-- Note d'instruction
		createUI("TextLabel", {
			Size = UDim2.new(1, -20, 0, 40),
			Position = UDim2.new(0, 10, 0, 45),
			BackgroundTransparency = 1,
			Text = Note,
			TextColor3 = Color3.new(0.8, 0.8, 0.8),
			TextWrapped = true,
			TextScaled = true,
			Font = Enum.Font.Gotham,
			Parent = KeyFrame,
		})

		-- Zone de texte pour entrer la clé
		local TextBox = createUI("TextBox", {
			Size = UDim2.new(1, -20, 0, 30),
			Position = UDim2.new(0, 10, 0, 95),
			BackgroundColor3 = Color3.fromRGB(50, 50, 50),
			TextColor3 = Color3.new(1, 1, 1),
			Font = Enum.Font.Gotham,
			TextScaled = true,
			Text = "",
			PlaceholderText = "Enter key here...",
			Parent = KeyFrame,
		})
		createUI("UICorner", {Parent = TextBox})

		-- Bouton de confirmation
		local ConfirmButton = createUI("TextButton", {
			Size = UDim2.new(1, -20, 0, 30),
			Position = UDim2.new(0, 10, 0, 135),
			BackgroundColor3 = Color3.fromRGB(70, 130, 180),
			Text = "Confirm",
			TextColor3 = Color3.new(1, 1, 1),
			Font = Enum.Font.GothamBold,
			TextScaled = true,
			Parent = KeyFrame,
		})
		createUI("UICorner", {Parent = ConfirmButton})


		ConfirmButton.MouseButton1Click:Connect(function()
			local inputKey = TextBox.Text
			if table.find(Key, inputKey) then
				print("✅ correct key :", inputKey)

				-- Animation de fermeture
				local closeTween = TweenService:Create(KeyFrame, TweenInfo.new(0.3, Enum.EasingStyle.Sine, Enum.EasingDirection.In), {
					Size = UDim2.new(0, 0, 0, 0),
					Position = UDim2.new(0.5, 0, 0.5, 0)
				})
				closeTween:Play()
				closeTween.Completed:Connect(function()
					KeyFrame:Destroy()
					if settings1.Intro then
						local TweenService = game:GetService("TweenService")
						local IntroTitle = settings1.IntroTitle

						-- Création de l'IntroFrame
						local IntroFrame = createUI("Frame", {
							Size = UDim2.new(0, 0, 0, 0),
							Position = UDim2.new(0.5, 0, 0.5, 0),
							AnchorPoint = Vector2.new(0.5, 0.5),
							BackgroundColor3 = Color3.fromRGB(30, 30, 30),
							Parent = gui,
						})
						createUI("UICorner", {Parent = IntroFrame})


						local anim = TweenService:Create(IntroFrame, TweenInfo.new(0.4, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
							Size = UDim2.new(0, 500, 0, 200),
							Position = UDim2.new(0.5, 0, 0.5, 0),
						})

						createUI("TextLabel", {
							Size = UDim2.new(1, -20, 0, 40),
							Position = UDim2.new(0, 10, 0.5, -20),
							BackgroundTransparency = 1,
							Text = IntroTitle,
							TextColor3 = Color3.new(1, 1, 1),
							TextScaled = true,
							Font = Enum.Font.GothamBold,
							Parent = IntroFrame,
						})
						anim:Play()
						anim.Completed:Connect(function()
							wait(1.5)
							IntroFrame:Destroy()
							VisibleWindow(window,settings1,gui)
							if onLoad then onLoad(window) end
						end)

					else
						VisibleWindow(window,settings1,gui)
						if onLoad then onLoad(window) end
					end
				end)
			else
				TextBox.Text = ""
				TextBox.PlaceholderText = "❌ Mauvaise clé"
			end
		end)

	else
		if settings1.Intro then
			local TweenService = game:GetService("TweenService")
			local IntroTitle = settings1.IntroTitle

			-- Création de l'IntroFrame
			local IntroFrame = createUI("Frame", {
				Size = UDim2.new(0, 0, 0, 0),
				Position = UDim2.new(0.5, 0, 0.5, 0),
				AnchorPoint = Vector2.new(0.5, 0.5),
				BackgroundColor3 = Color3.fromRGB(30, 30, 30),
				Parent = gui,
			})
			createUI("UICorner", {Parent = IntroFrame})


			local anim = TweenService:Create(IntroFrame, TweenInfo.new(0.4, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
				Size = UDim2.new(0, 500, 0, 200),
				Position = UDim2.new(0.5, 0, 0.5, 0),
			})

			createUI("TextLabel", {
				Size = UDim2.new(1, -20, 0, 40),
				Position = UDim2.new(0, 10, 0.5, -20),
				BackgroundTransparency = 1,
				Text = IntroTitle,
				TextColor3 = Color3.new(1, 1, 1),
				TextScaled = true,
				Font = Enum.Font.GothamBold,
				Parent = IntroFrame,
			})
			anim:Play()
			anim.Completed:Connect(function()
				wait(1.5)
				IntroFrame:Destroy()
				VisibleWindow(window,settings1,gui)
				if onLoad then onLoad(window) end
			end)

		else
			VisibleWindow(window,settings1,gui)
			if onLoad then onLoad(window) end

		end
	end

	return window
end


return library
