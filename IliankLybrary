local HttpService = game:GetService("HttpService")
local UserInputService = game:GetService("UserInputService")

local function createUIElement(className, properties)
    local element = Instance.new(className)
    for prop, val in pairs(properties) do
        element[prop] = val
    end
    return element
end

local library = {}

function library:CreateWindow(settings)
    local window = {}
    local tab = {content = Instance.new("Frame")}
    tab.sliders = {}
    tab.textboxes = {}
    tab.dropdowns = {}

    function tab:AddSlider(opts)
        local min, max = opts.Min or 0, opts.Max or 100
        local value = opts.Default or min
        local flag = opts.Flag or opts.Name or "Slider"

        local container = createUIElement("Frame", {
            BackgroundColor3 = UIState.Theme.SectionBackground,
            Size = UDim2.new(1, 0, 0, 60),
            Parent = tab.content
        })
        createUIElement("UICorner", { Parent = container })

        local label = createUIElement("TextLabel", {
            Text = (opts.Name or "Slider") .. ": " .. tostring(value),
            BackgroundTransparency = 1,
            TextColor3 = UIState.Theme.Text,
            Font = Enum.Font.Gotham,
            TextSize = 18,
            TextXAlignment = Enum.TextXAlignment.Left,
            Position = UDim2.new(0, 10, 0, 5),
            Size = UDim2.new(1, -20, 0, 20),
            Parent = container
        })

        local sliderBar = createUIElement("Frame", {
            BackgroundColor3 = UIState.Theme.Button,
            Position = UDim2.new(0, 10, 0, 35),
            Size = UDim2.new(1, -20, 0, 10),
            Parent = container
        })
        createUIElement("UICorner", { CornerRadius = UDim.new(0, 5), Parent = sliderBar })

        local fillBar = createUIElement("Frame", {
            BackgroundColor3 = UIState.Theme.Accent,
            Size = UDim2.new((value - min) / (max - min), 0, 1, 0),
            Parent = sliderBar
        })
        createUIElement("UICorner", { CornerRadius = UDim.new(0, 5), Parent = fillBar })

        local dragging = false

        local function updateSlider(inputX)
            local absPos = sliderBar.AbsolutePosition.X
            local absSize = sliderBar.AbsoluteSize.X
            local pos = math.clamp((inputX - absPos) / absSize, 0, 1)
            value = math.floor((min + (max - min) * pos) + 0.5)
            fillBar.Size = UDim2.new(pos, 0, 1, 0)
            label.Text = (opts.Name or "Slider") .. ": " .. tostring(value)
            if opts.Callback then opts.Callback(value) end
            tab.sliders[flag] = value
        end

        sliderBar.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
                updateSlider(input.Position.X)
            end
        end)

        UserInputService.InputChanged:Connect(function(input)
            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                updateSlider(input.Position.X)
            end
        end)

        UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = false
            end
        end)

        tab.sliders[flag] = value
    end

    function tab:AddTextbox(opts)
        local flag = opts.Flag or opts.Name or "Textbox"
        local txt = createUIElement("TextBox", {
            Text = opts.Default or "",
            PlaceholderText = opts.Placeholder or "",
            BackgroundColor3 = UIState.Theme.Button,
            TextColor3 = UIState.Theme.Text,
            PlaceholderColor3 = UIState.Theme.Placeholder,
            Font = Enum.Font.Gotham,
            TextSize = 18,
            Size = UDim2.new(1, 0, 0, 40),
            Parent = tab.content
        })
        createUIElement("UICorner", { Parent = txt })

        txt.FocusLost:Connect(function()
            tab.textboxes[flag] = txt.Text
            if opts.Callback then opts.Callback(txt.Text) end
        end)

        tab.textboxes[flag] = txt.Text
    end

    function tab:AddDropdown(opts)
        local flag = opts.Flag or opts.Name or "Dropdown"
        local btn = createUIElement("TextButton", {
            Text = opts.Default or opts.Options[1],
            BackgroundColor3 = UIState.Theme.Button,
            TextColor3 = UIState.Theme.Text,
            Font = Enum.Font.Gotham,
            TextSize = 18,
            Size = UDim2.new(1, 0, 0, 40),
            Parent = tab.content
        })
        createUIElement("UICorner", { Parent = btn })

        btn.MouseButton1Click:Connect(function()
            local i = table.find(opts.Options, btn.Text) or 1
            i = i + 1 > #opts.Options and 1 or i + 1
            btn.Text = opts.Options[i]
            tab.dropdowns[flag] = btn.Text
            if opts.Callback then opts.Callback(btn.Text) end
        end)

        tab.dropdowns[flag] = btn.Text
    end

    function window:SaveConfig()
        if settings.ConfigurationSaving and settings.ConfigurationSaving.Enabled then
            local path = settings.ConfigurationSaving.FolderName .. "/" .. settings.ConfigurationSaving.FileName .. ".json"
            local data = {
                sliders = tab.sliders,
                textboxes = tab.textboxes,
                dropdowns = tab.dropdowns
            }
            pcall(function()
                writefile(path, HttpService:JSONEncode(data))
            end)
        end
    end

    function window:LoadConfig()
        if settings.ConfigurationSaving and settings.ConfigurationSaving.Enabled then
            local path = settings.ConfigurationSaving.FolderName .. "/" .. settings.ConfigurationSaving.FileName .. ".json"
            if isfile(path) then
                local data = HttpService:JSONDecode(readfile(path))
                tab.sliders = data.sliders or {}
                tab.textboxes = data.textboxes or {}
                tab.dropdowns = data.dropdowns or {}
                -- Tu peux ici rappeler les callbacks si tu veux mettre Ã  jour l'affichage
            end
        end
    end

    return tab
end

return library
