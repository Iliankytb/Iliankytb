local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local RunService = game:GetService("RunService")

local function createUIElement(className, parent, properties)
	local element = Instance.new(className)
	element.Parent = parent
	for prop, value in pairs(properties) do
		element[prop] = value
	end
	return element
end

local Gui = Instance.new("ScreenGui", player.PlayerGui)
Gui.Enabled = true
Gui.ResetOnSpawn = false

local function createButton(text, parent)
	local button = createUIElement("TextButton", parent, {
		Size = UDim2.new(0.90, 0, 0, 50),
		Text = text,
		TextColor3 = Color3.fromRGB(255, 255, 255),
		Font = Enum.Font.GothamBold,
		TextSize = 16,
		BackgroundColor3 = Color3.fromRGB(50, 50, 50)
	})
	createUIElement("UIGradient", button, {
		Color = ColorSequence.new{
			ColorSequenceKeypoint.new(0, Color3.fromRGB(70, 70, 70)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(100, 100, 100))
		}
	})

	createUIElement("UIStroke", button, {
		Thickness = 2,
		Color = Color3.fromRGB(20, 20, 20),
		LineJoinMode = Enum.LineJoinMode.Round
	})

	createUIElement("UICorner", button, { CornerRadius = UDim.new(0.15, 0) })

	return button
end

-- Main Frame
local Frame = Instance.new("Frame", Gui)
Frame.Size = UDim2.new(0.5, 0, 0.5, 0)
Frame.Position = UDim2.new(0.25, 0, 0.25, 0)
Frame.BackgroundTransparency = 0.2
Frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
Frame.BorderMode = Enum.BorderMode.Middle

-- Toggle Menu Button
local ToggleFrameButton = createUIElement("TextButton", Gui, {
	Size = UDim2.new(0, 100, 0, 25),
	Position = UDim2.new(0.85, 0, 0.05, 0),
	Text = "Toggle Cheat Menu",
	TextColor3 = Color3.fromRGB(255, 255, 255),
	Font = Enum.Font.GothamBold,
	TextSize = 15,
	BackgroundColor3 = Color3.fromRGB(85, 170, 255)
})

-- Scrolling Frame for Menu Sections
local ScrollingFrameMain = Instance.new("ScrollingFrame", Frame)
ScrollingFrameMain.Size = UDim2.new(1, 0, 1, 0)
ScrollingFrameMain.Position = UDim2.new(0, 0, 0, 0)
ScrollingFrameMain.BackgroundTransparency = 1
ScrollingFrameMain.Visible = true
ScrollingFrameMain.CanvasSize = UDim2.new(0, 0, 0, 1000)

-- Frame Corners and Stroke (UI Effects)
local UiCorner = Instance.new("UICorner", Frame)
UiCorner.CornerRadius = UDim.new(0, 15)

local UiStroke = Instance.new("UIStroke", Frame)
UiStroke.Thickness = 1.5
UiStroke.Color = Color3.fromRGB(80, 150, 250)
UiStroke.LineJoinMode = Enum.LineJoinMode.Round

-- Toggle Frame Visibility
ToggleFrameButton.MouseButton1Click:Connect(function()
	Frame.Visible = not Frame.Visible
end)

-- Function to switch between sections
local function showSection(sectionFrame)
	ScrollingFrameMain.Visible = false
	sectionFrame.Visible = true
end

local TeleportObjectButton = createButton("Auto Teleport Object Off",ScrollingFrameMain)

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class TeleportPlayer : MonoBehaviour
{
    public GameObject player; // Le joueur à téléporter
    public string[] objectNames = { "LightBulb", "GasCanister" }; // Les objets vers lesquels téléporter
    private List<GameObject> teleportTargets = new List<GameObject>();
    public bool canTeleport = false; // Booléen pour vérifier si la téléportation est autorisée
    public float stepInterval = 1.0f; // Intervalle entre chaque step en secondes

    void Start()
    {
        // Trouver tous les objets avec les noms donnés
        foreach (string objectName in objectNames)
        {
            GameObject[] foundObjects = GameObject.FindGameObjectsWithTag(objectName);
            teleportTargets.AddRange(foundObjects);
        }

        // Démarrer la boucle de "run stepped" avec le RunService simulé (via une coroutine)
        StartCoroutine(RunStepped());
    }

    // Méthode pour téléporter le joueur vers un objet aléatoire
    public void TeleportToRandomObject()
    {
        if (!canTeleport)
        {
            Debug.Log("La téléportation est désactivée.");
            return;
        }

        if (teleportTargets.Count > 0)
        {
            GameObject targetObject = teleportTargets[Random.Range(0, teleportTargets.Count)];
            player.transform.position = targetObject.transform.position;
            Debug.Log("Téléporté à : " + targetObject.name);
        }
        else
        {
            Debug.Log("Aucun objet trouvé pour la téléportation.");
        }
    }

    // Coroutine qui simule un service de "run stepped"
    private IEnumerator RunStepped()
    {
        while (true) // Boucle infinie pour exécuter des étapes de manière continue
        {
            yield return new WaitForSeconds(stepInterval); // Attendre l'intervalle défini entre chaque step

            if (canTeleport)
            {
                Debug.Log("Condition vraie, téléportation en cours...");
                TeleportToRandomObject();
            }
            else
            {
                Debug.Log("Condition fausse, aucune action n'est effectuée.");
            }
        }
    }
}

local function tpobject()
canTeleport = not canTeleport
if canTeleport then
TeleportObjectButton.Text = "Auto Teleport Object On"
else
TeleportObjectButton.Text = "Auto Teleport Object Off"
end
end

TeleportObjectButton.MouseButton1Click:Connect(tpobject)
