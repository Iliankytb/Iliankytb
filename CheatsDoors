local player = game.Players.LocalPlayer
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

-- Fonction pour créer des éléments UI
local function createUIElement(className, parent, properties)
	local element = Instance.new(className)
	element.Parent = parent
	for prop, value in pairs(properties) do
		element[prop] = value
	end
	return element
end

-- Supprimer l'ancien GUI si présent
local oldGui = player.PlayerGui:FindFirstChild("GuiPlayer")
if oldGui then
	oldGui:Destroy()
end

-- Création du GUI
local screenGui = createUIElement("ScreenGui", player.PlayerGui, { Name = "GuiPlayer", ResetOnSpawn = false })

-- Fonction pour afficher un message de bienvenue quand le GUI est ouvert
local welcomeText = createUIElement("TextLabel", screenGui, {
	Size = UDim2.new(0.5, 0, 0.1, 0),
	Position = UDim2.new(0.25, 0, 0.05, 0),
	Text = "Thanks To Support Me!",
	TextColor3 = Color3.fromRGB(255, 255, 255),
	Font = Enum.Font.GothamBold,
	TextSize = 24,
	BackgroundTransparency = 1,
	Visible = false
})

welcomeText.Visible = true
wait(5)  -- Affiche le message pendant 5 secondes
welcomeText.Visible = false

-- Main Frame
local frame = createUIElement("Frame", screenGui, {
	Size = UDim2.new(0.25, 0, 0.25, 0),
	Position = UDim2.new(0.55, 0, 0.05, 0),
	BackgroundColor3 = Color3.fromRGB(60, 60, 60),
	BackgroundTransparency = 0.25,
	Visible = false
})

-- Gradient sur le Frame
createUIElement("UIGradient", frame, {
	Color = ColorSequence.new{
		ColorSequenceKeypoint.new(0, Color3.fromRGB(60, 60, 60)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(90, 90, 90))
	}
})

-- UI Stroke et Coin arrondi pour le Frame
createUIElement("UIStroke", frame, {
	Thickness = 3,
	Color = Color3.fromRGB(20, 20, 20),
	LineJoinMode = Enum.LineJoinMode.Round
})

createUIElement("UICorner", frame, { CornerRadius = UDim.new(0.1, 0) })

-- Bouton pour afficher/masquer le GUI
local toggleButton = createUIElement("TextButton", screenGui, {
	Size = UDim2.new(0, 100, 0, 25),
	Position = UDim2.new(0.85, 0, 0.05, 0),
	Text = "Toggle Menu",
	TextColor3 = Color3.fromRGB(255, 255, 255),
	Font = Enum.Font.GothamBold,
	TextSize = 18,
	BackgroundColor3 = Color3.fromRGB(85, 170, 255)
})

createUIElement("UICorner", toggleButton, { CornerRadius = UDim.new(0.45, 0) })

-- Sidebar Frame à gauche
local sidebarFrame = createUIElement("Frame", screenGui, {
	Size = UDim2.new(0.2, 0, 0.25, 0),
	Position = UDim2.new(0.45, 0, 0.05, 0),
	BackgroundColor3 = Color3.fromRGB(40, 40, 40),
	BackgroundTransparency = 0.25,
	Visible = false
})

-- Scrolling Frame dans sidebar
local sidebarScrollingFrame = createUIElement("ScrollingFrame", sidebarFrame, {
	Size = UDim2.new(1, 0, 1, 0),
	CanvasSize = UDim2.new(0, 0, 0, 800),
	ScrollBarThickness = 8,
	BackgroundTransparency = 1
})

-- Frames pour différentes sections
local scrollingFrame = createUIElement("ScrollingFrame", frame, {
	Size = UDim2.new(1, 0, 1, 0),
	CanvasSize = UDim2.new(0, 0, 0, 800),
	ScrollBarThickness = 8,
	BackgroundTransparency = 1
})

local scrollingframeEsp = createUIElement("ScrollingFrame", frame, {
	Size = UDim2.new(1, 0, 1, 0),
	CanvasSize = UDim2.new(0, 0, 0, 800),
	ScrollBarThickness = 8,
	BackgroundTransparency = 1,
	Visible = false
})

local scrollingframePlayer = createUIElement("ScrollingFrame", frame, {
	Size = UDim2.new(1, 0, 1, 0),
	CanvasSize = UDim2.new(0, 0, 0, 800),
	ScrollBarThickness = 8,
	BackgroundTransparency = 1,
	Visible = false
})

local scrollingframeDupeItem = createUIElement("ScrollingFrame", frame, {
	Size = UDim2.new(1, 0, 1, 0),
	CanvasSize = UDim2.new(0, 0, 0, 800),
	ScrollBarThickness = 8,
	BackgroundTransparency = 1,
	Visible = false
})

-- Fonction pour afficher/masquer différentes sections
local function showSection(sectionFrame)
	scrollingFrame.Visible = false
	scrollingframeEsp.Visible = false
	scrollingframePlayer.Visible = false
	scrollingframeDupeItem.Visible = false
	sectionFrame.Visible = true
end

-- UIListLayout pour organiser les boutons dans le frame principal et le scrolling ESP
createUIElement("UIListLayout", sidebarScrollingFrame, {
	SortOrder = Enum.SortOrder.LayoutOrder,
	Padding = UDim.new(0, 10)
})

createUIElement("UIListLayout", scrollingFrame, {
	SortOrder = Enum.SortOrder.LayoutOrder,
	Padding = UDim.new(0, 10)
})

createUIElement("UIListLayout", scrollingframeEsp, {
	SortOrder = Enum.SortOrder.LayoutOrder,
	Padding = UDim.new(0, 10)
})

-- Ajout d'un UIPadding pour espacer les éléments
createUIElement("UIPadding", scrollingFrame, {
	PaddingTop = UDim.new(0, 10),
	PaddingBottom = UDim.new(0, 10),
	PaddingLeft = UDim.new(0, 10),
	PaddingRight = UDim.new(0, 10)
})

-- Fonction pour créer des boutons avec changement de texte "On/Off"
local function createButton(text, parent, callback)
	local button = createUIElement("TextButton", parent, {
		Size = UDim2.new(0.90, 0, 0, 50),
		Text = text,
		TextColor3 = Color3.fromRGB(255, 255, 255),
		Font = Enum.Font.GothamBold,
		TextSize = 16,
		BackgroundColor3 = Color3.fromRGB(50, 50, 50)
	})

	-- Gradient sur chaque bouton
	createUIElement("UIGradient", button, {
		Color = ColorSequence.new{
			ColorSequenceKeypoint.new(0, Color3.fromRGB(70, 70, 70)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(100, 100, 100))
		}
	})

	createUIElement("UIStroke", button, {
		Thickness = 2,
		Color = Color3.fromRGB(20, 20, 20),
		LineJoinMode = Enum.LineJoinMode.Round
	})

	createUIElement("UICorner", button, { CornerRadius = UDim.new(0.15, 0) })

	-- Connecter le callback pour le bouton
	button.MouseButton1Click:Connect(callback)

	return button
end
local function updateEspTargets()
    espTargets = {}
    for _, model in pairs(workspace:GetDescendants()) do
        if model:IsA("Model") or model:IsA("Part") then
            local nameLower = model.Name:lower()
            if nameLower == "locker_large" or nameLower == "locker_small" or nameLower == "door" or nameLower == "sideroomdupe" or nameLower == "wardrobe" or nameLower == "gold" or nameLower == "goldpile" or nameLower == "MineGenerator" or nameLower == "fuse" or nameLower == "key" or nameLower == "key_holder" or nameLower == "rift" or nameLower == "Chest" or nameLower == "Lockpick" or nameLower == "Battery" or nameLower == "FlashLight" or nameLower == "figure_rig" or nameLower == "figure" or nameLower == "rush" or nameLower == "ambush" or nameLower == "Screech" or nameLower == "halt" or nameLower == "Rushed" or nameLower == "LiveHintBook" or nameLower == "drawercontainer" then
                table.insert(espTargets, model)
            end
        end
    end
end

local function highlightModel(model)
    if not model:FindFirstChildOfClass("Highlight") then
        local highlight = Instance.new("Highlight", model)
        highlight.FillColor = highlightColor
        highlight.FillTransparency = highlightTransparency
        highlight.OutlineTransparency = highlightTransparency
    end

    if not model:FindFirstChildOfClass("BillboardGui") then
        local billboard = Instance.new("BillboardGui", model)
        billboard.Adornee = model
        billboard.AlwaysOnTop = true
        billboard.Size = UDim2.new(0, 100, 0, 50)
        billboard.StudsOffset = Vector3.new(0, 2, 0)

        local textLabel = Instance.new("TextLabel", billboard)
        textLabel.Size = UDim2.new(1, 0, 1, 0)
        textLabel.BackgroundTransparency = 1
        textLabel.Text = model.Name
        textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    end
end

local function highlightModels()
    for _, model in pairs(espTargets) do
        highlightModel(model)
    end
end

local function clearHighlights()
    for _, obj in pairs(workspace:GetDescendants()) do
        if obj:IsA("Highlight") or obj:IsA("BillboardGui") then
            obj:Destroy()
        end
    end
end



-- Boutons dans la sidebar
createButton("Main", sidebarScrollingFrame, function()
	showSection(scrollingFrame)
end)

createButton("ESP", sidebarScrollingFrame, function()
	showSection(scrollingframeEsp)
end)

createButton("Player", sidebarScrollingFrame, function()
	showSection(scrollingframePlayer)
end)

createButton("Item Dupe", sidebarScrollingFrame, function()
	showSection(scrollingframeDupeItem)
end)

createButton("Information", sidebarScrollingFrame, function()
	-- TODO: Ajouter fonctionnalité pour la section Information
end)

createButton("Settings", sidebarScrollingFrame, function()
	-- TODO: Ajouter fonctionnalité pour la section Settings
end)

createButton("Remove UI", sidebarScrollingFrame, function()
	if screenGui then
		screenGui:Destroy()
	end
end)

-- Fonctionnalité ESP
local espActive = false
local espTargets = {}
local FullBrightActive = false
local NoPromptCooldown = false

local function toggleNoPromptCooldown()
	NoPromptCooldown = not NoPromptCooldown
	if NoPromptCooldown then
		for _, prompt in ipairs(workspace:GetDescendants()) do
			if prompt:IsA("ProximityPrompt") then
				prompt.HoldDuration = 0
			end
		end
		NoCooldownPromptButton.Text = "No Prompt Cooldown: On"
	else
		for _, prompt in ipairs(workspace:GetDescendants()) do
			if prompt:IsA("ProximityPrompt") then
				prompt.HoldDuration = 0.5 -- ou la valeur par défaut souhaitée
			end
		end
		NoCooldownPromptButton.Text = "No Prompt Cooldown: Off"
	end
end

-- Création du bouton pour le No Prompt Cooldown
local NoCooldownPromptButton = createButton("No Prompt Cooldown: Off", scrollingFrame, function()
	toggleNoPromptCooldown()
end)

local espActivePlayer = false


local function toggleESPPlayer()
espActivePlayer = not espActivePlayer
if espActivePlayer then
		-- Activer l'ESP
		for _, target in ipairs(workspace:GetChildren()) do
			if target:IsA("Model") and target:FindFirstChild("Humanoid") then
				local espBox = Instance.new("BoxHandleAdornment")
				espBox.Size = target:GetExtentsSize()
				espBox.Adornee = target.PrimaryPart
				espBox.AlwaysOnTop = true
				espBox.ZIndex = 10
				espBox.Color3 = Color3.fromRGB(255, 0, 0)
				espBox.Transparency = 0.5
				espBox.Parent = target
				table.insert(espTargets, espBox)
			end
		end
	else
		-- Désactiver l'ESP
		for _, espBox in ipairs(espTargets) do
			espBox:Destroy()
		end
		espTargets = {}
	end
end

-- Fonction pour activer/désactiver l'ESP
local function toggleESP()
	espActive = not espActive
	espButton.Text = espActive and "ESP On" or "ESP Off"
    if espActive then
        updateEspTargets()
        highlightModels()
    else
        clearHighlights()
    end
end

-- Bouton pour activer/désactiver l'ESP
createButton("ESP Off", scrollingframeEsp, function()
	toggleESP()
end)

createButton("ESP Player Off", scrollingframeEsp, function()
	toggleESPPlayer()
end)


-- Fonction pour activer/désactiver le FullBright
local function toggleFullBright()
	FullBrightActive = not FullBrightActive
	if FullBrightActive then
		game.Lighting.Brightness = 2
		game.Lighting.ClockTime = 14
		game.Lighting.FogEnd = 100000
		game.Lighting.GlobalShadows = false
	else
		-- Remettre les paramètres par défaut de l'éclairage (ajuster si nécessaire)
		game.Lighting.Brightness = 1
		game.Lighting.ClockTime = 12
		game.Lighting.FogEnd = 1000
		game.Lighting.GlobalShadows = true
	end
end

-- Bouton pour activer/désactiver le FullBright
createButton("Toggle FullBright",scrollingFrame, function()
	toggleFullBright()
end)
