local player = game.Players.LocalPlayer
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

-- Fonction pour créer des éléments UI
local function createUIElement(className, parent, properties)
    local element = Instance.new(className)
    element.Parent = parent
    for prop, value in pairs(properties) do
        element[prop] = value
    end
    return element
end

-- Supprimer l'ancien GUI si présent
local oldGui = player.PlayerGui:FindFirstChild("GuiPlayer")
if oldGui then
    oldGui:Destroy()
end

-- Création du GUI principal
local screenGui = createUIElement("ScreenGui", player.PlayerGui, { Name = "GuiPlayer", ResetOnSpawn = false })

-- Fonction pour afficher un message de bienvenue
local welcomeText = createUIElement("TextLabel", screenGui, {
    Size = UDim2.new(0.5, 0, 0.1, 0),
    Position = UDim2.new(0.25, 0, 0.05, 0),
    Text = "Thanks To Support Me!",
    TextColor3 = Color3.fromRGB(255, 255, 255),
    Font = Enum.Font.GothamBold,
    TextSize = 24,
    BackgroundTransparency = 1,
    Visible = false
})

welcomeText.Visible = true
wait(5)
welcomeText.Visible = false

-- Main Frame et Sidebar (Centré)
local frame = createUIElement("Frame", screenGui, {
    Size = UDim2.new(0.3, 0, 0.4, 0),
    Position = UDim2.new(0.35, 0, 0.3, 0),
    BackgroundColor3 = Color3.fromRGB(60, 60, 60),
    BackgroundTransparency = 0.25,
    Visible = false
})

local sidebarFrame = createUIElement("Frame", screenGui, {
    Size = UDim2.new(0.2, 0, 0.4, 0),
    Position = UDim2.new(0.15, 0, 0.3, 0),
    BackgroundColor3 = Color3.fromRGB(40, 40, 40),
    BackgroundTransparency = 0.25,
    Visible = false
})

-- Gradient, UI Stroke, Coin arrondi pour les Frames
createUIElement("UIGradient", frame, {
    Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(60, 60, 60)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(90, 90, 90))
    }
})

createUIElement("UIStroke", frame, {
    Thickness = 3,
    Color = Color3.fromRGB(20, 20, 20),
    LineJoinMode = Enum.LineJoinMode.Round
})

createUIElement("UICorner", frame, { CornerRadius = UDim.new(0.1, 0) })

-- Bouton pour afficher/masquer le GUI
local toggleButton = createUIElement("TextButton", screenGui, {
    Size = UDim2.new(0, 150, 0, 50),
    Position = UDim2.new(0.85, 0, 0.05, 0),
    Text = "Toggle Menu",
    TextColor3 = Color3.fromRGB(255, 255, 255),
    Font = Enum.Font.GothamBold,
    TextSize = 18,
    BackgroundColor3 = Color3.fromRGB(85, 170, 255)
})

createUIElement("UICorner", toggleButton, { CornerRadius = UDim.new(0.45, 0) })

-- Scrolling Frames pour les différentes sections
local scrollingFrame = createUIElement("ScrollingFrame", frame, {
    Size = UDim2.new(1, 0, 1, 0),
    CanvasSize = UDim2.new(0, 0, 0, 800),
    ScrollBarThickness = 8,
    BackgroundTransparency = 1
})

local scrollingframeEsp = createUIElement("ScrollingFrame", frame, {
    Size = UDim2.new(1, 0, 1, 0),
    CanvasSize = UDim2.new(0, 0, 0, 800),
    ScrollBarThickness = 8,
    BackgroundTransparency = 1,
    Visible = false
})

local scrollingframePlayer = createUIElement("ScrollingFrame", frame, {
    Size = UDim2.new(1, 0, 1, 0),
    CanvasSize = UDim2.new(0, 0, 0, 800),
    ScrollBarThickness = 8,
    BackgroundTransparency = 1,
    Visible = false
})

local scrollingframeDupeItem = createUIElement("ScrollingFrame", frame, {
    Size = UDim2.new(1, 0, 1, 0),
    CanvasSize = UDim2.new(0, 0, 0, 800),
    ScrollBarThickness = 8,
    BackgroundTransparency = 1,
    Visible = false
})

-- Fonction pour afficher/masquer différentes sections
local function showSection(sectionFrame)
    scrollingFrame.Visible = false
    scrollingframeEsp.Visible = false
    scrollingframePlayer.Visible = false
    scrollingframeDupeItem.Visible = false
    sectionFrame.Visible = true
end

-- Fonction pour créer des boutons avec changement de texte "On/Off"
local function createButton(text, parent, callback)
    local button = createUIElement("TextButton", parent, {
        Size = UDim2.new(0.90, 0, 0, 50),
        Text = text,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        Font = Enum.Font.GothamBold,
        TextSize = 16,
        BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    })

    -- Gradient sur chaque bouton
    createUIElement("UIGradient", button, {
        Color = ColorSequence.new{
            ColorSequenceKeypoint.new(0, Color3.fromRGB(70, 70, 70)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(100, 100, 100))
        }
    })

    createUIElement("UIStroke", button, {
        Thickness = 2,
        Color = Color3.fromRGB(20, 20, 20),
        LineJoinMode = Enum.LineJoinMode.Round
    })

    createUIElement("UICorner", button, { CornerRadius = UDim.new(0.15, 0) })

    -- Connecter le callback pour le bouton
    button.MouseButton1Click:Connect(callback)

    return button
end

local ESPButton = createButton("ESP Off (Every Esp)", scrollingframeEsp)
local ESPPlayerButton = createButton("ESP Player Off", scrollingframeEsp)
local ESPDoorButton = createButton("ESP Door Off (Coming Soon)", scrollingframeEsp)

-- Fonctionnalité ESP
local espActive = false
local espTargets = {}

local function updateEspTargetsModels()
    espTargets = {}
    for _, model in pairs(workspace:GetDescendants()) do
        if model:IsA("Model") or model:IsA("Part") then
            local nameLower = model.Name:lower()
            if nameLower == "locker_large" or nameLower == "door" or nameLower == "gold" or nameLower == "key" then
                table.insert(espTargets, model)
            end
        end
    end
end

local function highlightModel(model)
    if not model:FindFirstChildOfClass("Highlight") then
        local highlight = Instance.new("Highlight", model)
        highlight.FillColor = Color3.fromRGB(255, 170, 0)
        highlight.FillTransparency = 0.5
        highlight.OutlineTransparency = 0.5
    end
end

local function highlightModels()
    for _, model in pairs(espTargets) do
        highlightModel(model)
    end
end

local function clearHighlights()
    for _, obj in pairs(workspace:GetDescendants()) do
        if obj:IsA("Highlight") then
            obj:Destroy()
        end
    end
end

local function Esp()
    espActive = not espActive
    if espActive then
        updateEspTargetsModels()
        highlightModels()
    else
        clearHighlights()
    end
end

createButton("ESP Off", scrollingframeEsp, function()
    Esp()
end)

-- FullBright
local FullBrightActive = false

local function toggleFullBright()
    FullBrightActive = not FullBrightActive
    if FullBrightActive then
        game.Lighting.Brightness = 100
        game.Lighting.ClockTime = 14
        game.Lighting.FogEnd = 100000
        game.Lighting.GlobalShadows = false
    else
        game.Lighting.Brightness = 1
        game.Lighting.ClockTime = 12
        game.Lighting.FogEnd = 1000
        game.Lighting.GlobalShadows = true
    end
end

createButton("FullBright Off", scrollingframeEsp, function()
    toggleFullBright()
end)

-- Ajouter des sections supplémentaires (Player, Dupe Items, etc.)
createButton("Player Menu", scrollingFrame, function()
    showSection(scrollingframePlayer)
end)

createButton("Dupe Items Menu", scrollingFrame, function()
    showSection(scrollingframeDupeItem)
end)

-- Fonction pour dupliquer des objets dans le sac à dos du joueur
local function dupeItems()
    for _, item in pairs(player.Backpack:GetChildren()) do
        local clone = item:Clone()
        clone.Parent = player.Backpack
    end
end

-- Ajouter le bouton pour dupliquer les objets dans le menu Dupe Items
createButton("Dupe Items", scrollingframeDupeItem, function()
    dupeItems()
end)

-- Bouton pour afficher la section ESP
createButton("ESP Menu", scrollingFrame, function()
    showSection(scrollingframeEsp)
end)

-- Bouton pour afficher la section Player
createButton("Player Menu", scrollingFrame, function()
    showSection(scrollingframePlayer)
end)

-- Fonction pour afficher/masquer le menu principal
toggleButton.MouseButton1Click:Connect(function()
    frame.Visible = not frame.Visible
    sidebarFrame.Visible = not sidebarFrame.Visible
end)

-- Démarrer avec la section principale visible
showSection(scrollingFrame)
